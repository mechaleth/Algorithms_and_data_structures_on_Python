# Определить, какое число в массиве встречается чаще всего.
from random import randint

import cProfile


def test_it(func):
    if func([1, 2, 3, 4, 5, 4, 9, 4, 5, 11]) == (4, 3):
        print("test_1 ok")
    else:
        print("test_1 not ok")
    if func([1, 2, 3, 4, 5, 4, 9, 4, 5, 11, 5])[1] == 3:
        print("test_2 ok")
    else:
        print("test_2 not ok")
    if func([1, 2, 3, 4, 5, 7])[1] == 1:
        print("test_3 ok")
    else:
        print("test_3 not ok")

def get_most_frequent(array: list) -> tuple:
    """
    Возвращает самый часто встречающийся элемент
    и его частоту

    :param array: список или кортеж
    :return: кортеж с элементом и частотой
    """
    max_freq = 1
    max_freq_element = array[0]
    array_size = len(array)
    for index in range(array_size):
        countage = 1
        for i in range(index + 1, array_size):
            if array[index] == array[i]:
                countage += 1
        if countage > max_freq:
            max_freq = countage
            max_freq_element = array[index]
    return max_freq_element, max_freq

# test_it(get_most_frequent)

# O(N**2)

# без повторения
# cProfile.run('get_most_frequent([-31, -34, 44, -50, -14, 3, -3, 50, 39, -13])')
# 5 function calls in 0.000 seconds

#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#      1    0.000    0.000    0.000    0.000 hometask_3_task_4_2.py:21(get_most_frequent)
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
# timeit
# 1000 loops, best of 5: 11 usec per loop

# с повторениями
# cProfile.run('get_most_frequent([-30, 40, -45, -45, -25, -45, -30, -20, -45, -25])')
# 5 function calls in 0.000 seconds
#
#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#      1    0.000    0.000    0.000    0.000 hometask_3_task_4_2.py:21(get_most_frequent)
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
# timeit
# 1000 loops, best of 5: 11.8 usec per loop

# без повторения
# cProfile.run('get_most_frequent([110, -99, 174, -194, -20, 215, 9, 12, 34, -41, 209, -239, 42, -173, -249, -221, 57, 135, 22, 66, 40, 26, -44, -1, 207, 169, -135, -174, 17, 162, 96, 93, 119, -60, -6, -200, 208, -196, 137, 5, 50, -188, -58, -175, -72, 51, 53, -163, 32, -228, -215, 127, 120, 244, -143, -250, 240, -195, 211, -32, -139, 74, -141, -104, 16, 188, 151, 190, 4, 224, -53, -117, 39, -63, -197, 245, -125, 38, 90, 82, 98, -227, -67, -34, 23, -217, 226, 217, 182, -181, -18, -121, -238, 70, -74, 25, 86, -205, -52, 199])')
# 105 function calls in 0.001 seconds
#
#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.001    0.001 <string>:1(<module>)
#      1    0.001    0.001    0.001    0.001 hometask_3_task_4_2.py:21(get_most_frequent)
#      1    0.001    0.001    0.001    0.001 {built-in method builtins.exec}
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
# timeit
# 1000 loops, best of 5: 256 usec per loop

# с повторениями (20)
# cProfile.run('get_most_frequent([198, 244, 131, -50, 42, -29, 58, 22, -172, 171, -49, 131, -26, 103, -234, -157, -109, 156, -126, 216, 247, 18, 222, 56, -5, -22, 57, 223, 141, 40, 0, -171, -77, -166, -196, 233, 179, -39, 149, 237, 203, 70, -206, 214, 18, -193, -116, 15, -211, -2, -92, -151, 90, -187, -69, -20, 206, -138, 32, -89, 247, 34, 107, -179, -33, -24, -242, 232, 119, -28, 238, 72, -74, 126, -10, -147, -83, 2, -86, 90, 105, 72, 192, 10, -69, -130, 154, -5, -112, -128, 162, 17, 125, 27, 15, -116, 190, 56, 235, 243])')
# 5 function calls in 0.001 seconds
#
# ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.001    0.001 <string>:1(<module>)
#      1    0.001    0.001    0.001    0.001 hometask_3_task_4_2.py:21(get_most_frequent)
#      1    0.001    0.001    0.001    0.001 {built-in method builtins.exec}
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
# timeit
# 1000 loops, best of 5: 703 usec per loop

# без повторений
# cProfile.run('get_most_frequent([4001, -17781, -16358, 10771, 19014, 14654, -16573, 9411, 16939, 8298, 18862, -20169, 10547, -19121, -8711, -10711, -19381, 17431, 1261, 15406, -4670, 3847, 1925, 14229, 18593, -7683, -19149, -7369, -14559, 3028, 944, -13190, 9438, -8804, -14387, -16936, 17300, 4563, 11428, 7502, 11231, 16974, 17815, 11916, 1803, -19161, 8352, -17966, -9451, -19413, -6752, -14131, -1570, 15107, 13644, 3896, -2112, 8700, -16008, 9838, -13573, -20474, -7235, 8214, 8674, -9626, -17077, -1143, 11561, 5172, -8732, -6380, -2274, -12873, 17936, 7992, 8932, -14210, -16024, -1975, -14989, -1689, 15130, 3771, 13410, -973, -8750, -2797, 13043, 1172, -2198, -12059, -16179, -658, 477, -10373, 2501, 10759, 5001, -6980, -17929, -7081, -10288, -17398, -3700, 16767, 412, -4965, -11191, 19768, 9521, -10634, -18326, -5173, 1189, 14391, 8014, 19847, 12433, -4078, 8634, 8641, 12423, -5483, -12056, 360, -9213, -539, 5257, 16132, 13442, 10365, -16015, 11724, -17806, 82, 2637, 10524, -18470, 6447, -4196, 3492, -12260, 1839, 6660, -10200, -741, 16587, -7826, 4851, 7014, 4000, -1432, 18190, 844, -7373, 19878, -7542, 2175, 10515, -5348, -4156, 7931, -1320, 2420, -843, -15487, 9103, -1057, 15856, -16002, 4569, 7098, -4665, 15822, -14451, 18461, -5665, -13196, 10514, -18120, 16279, 14035, 4065, 5072, 17929, 11630, 8173, -2524, -10812, 2998, 8734, -7395, -1164, 2736, 5107, -1484, -18452, -1834, 15081, -6998, -14260, -4421, 19850, -19168, 18988, -235, 19669, -2282, 3503, 9128, 10684, 13849, -2175, 20030, -12106, -5526, 4084, 5552, -5062, -304, -5587, 12357, 7926, 7825, -3319, 13124, 803, 18339, -12878, -10437, 11767, 4074, -17129, 13427, 9360, 6904, 18955, -1899, 7556, 9547, 5326, -3085, 8233, -12307, -13195, 11026, 10165, -16353, -13234, -17284, 17775, 13424, 19253, -4929, -13318, -1226, 17169, 533, -7625, 4977, -5523, -1191, -11292, 2916, 10834, -11760, -2498, -9791, 8795, -6936, -13030, -10565, -9549, 15435, -5443, -10598, 9715, 1236, -16217, -1791, 16338, 14284, -11882, -20182, -1130, 16170, -802, 14360, -18948, 12479, -17015, -10721, -17362, 1906, -17166, 11091, -5154, 14808, -4159, -11056, -2091, 19231, -377, 4893, 904, 7987, 12243, -5109, 3683, 7112, -5069, -10121, 1131, 11572, 15679, 13398, -14882, 9594, -17686, 9911, -5821, -20016, 8826, -10558, 4095, 18639, -20409, 18778, -9459, -13950, 15581, 5321, 6629, -15957, 19769, -10550, -10082, 16745, 603, 16472, 1744, 10420, 5538, 16124, 14194, -9706, -19572, -19965, -2168, 2044, 9881, -14443, 7079, 18510, 17509, -7530, 16288, -11231, -9622, 19547, 4621, -5758, -4887, -13166, 16263, -259, -9209, -17998, 8817, -16986, -8846, -6453, -7838, -563, 10201, 12573, 2317, -8004, 2350, -4536, 18855, 16831, 16474, 9812, 12081, 15394, 6616, -4786, 3755, 9430, -12907, -586, 4514, 16607, 17622, 19570, 18979, 10246, -4578, 16673, 14280, 6949, -2443, 11725, -290, 14946, -14312, -19699, -1406, 19838, -19770, -340, -11187, -19732, 12695, -15083, -2371, 9089, 18450, 2613, 17147, -12331, -2654, 19464, -18534, -7969, -3075, 11689, 18092, 3362, 6664, 19121, -14726, 15208, 17279, 5044, 9164, 13595, 2085, 2804, -1425, -14862, -19414, 19603, -17715, 3462, -13639, 16654, 8071, -10996, -2756, -9578, -363, -20070, 13384, 11086, -6985, -14778, -10642, -18660, -11052, -10829, 19078, -1386, -12674, 19193, 5024, 6705, -14336, 5838, 12927, -6490, 15090, 8193, 7521, 4982, -2714, -11772, 3934, -9383, 17236, -1475, 6219, -10023, -15451, 19740, -6282, -1091, 8951, -4009, 16489, -7277, -9575, 2192, -15360, -12347, 1570, -13266, -2025, 15214, 15067, 8129, 17735, -3654, 7283, 12608, -966, 14853, -12547, 10116, 6203, -12953, -20056, 11288, 3735, -8177, 11953, -601, 8839, -4483, 17666, 2842, -13517, -20317, 16239, -11870, -2730, 15412, 18583, -15641, 1214, -1162, 1112, 18693, -17521, 13022, 4330, -2281, -14863, -2584, -8956, -15133, 14605, -10776, 13681, -2969, -13016, -16790, -14812, 10134, -13272, 6739, 678, 5280, -8985, -3693, -7782, 20421, 17030, -16832, -10549, 6736, -18989, -11849, -9411, -1953, 15225, 3586, 14451, 7265, -17467, 19965, -8262, 13727, 16206, 4602, 1697, -8475, 13797, 15051, -19504, -1095, -15123, -2720, 11085, 11846, 2229, 14726, 1957, 6555, -3555, -521, -14211, -9255, 12557, -2258, 19860, -18997, 16276, -20360, -3163, -9885, 15830, 1492, 1795, -6657, 17483, 11082, -8768, -18506, 13803, -9001, 11158, 6490, 14792, -15389, 19827, 4980, -6808, -15855, -9362, 4584, 11221, 5392, 20158, 3386, -2687, 15073, -4424, -4703, -17113, -16235, 6078, -11381, 16769, 3715, 16138, -1836, -289, 13447, -14379, -10974, 12142, -19389, -1107, -8694, 14983, -7297, 16003, -5517, 6900, -15359, -8647, 4725, -18148, -2046, -589, -15496, 8379, -1596, 12309, 16253, -12544, 7902, -12958, -6703, -17864, -18289, -15247, 12388, -10584, -10986, 14785, 96, -17383, 225, 14999, -20436, -605, -5068, -17798, -1147, 2066, 9163, -11127, 17829, 20458, -2628, -16797, 12600, 10067, -3966, 18222, -6584, -2410, 4904, -17895, 5499, -5635, 11936, 11698, -16006, -16107, -2292, 12197, 13979, -9813, -1101, 5790, -15119, 6130, 13381, 6914, 18038, -2379, -15244, 19143, -20160, -18492, 9307, -11543, -10862, 17125, 18157, 18909, -9193, 285, -14762, 74, 13204, -11814, -19419, -8666, -4457, -13484, 19725, 7986, -14625, -12239, -967, 20447, -8900, 3562, 3053, -15984, 18585, 16428, 5926, 10478, -12172, 6030, -9649, 13179, 12186, 16228, 13966, 2868, -15293, 18621, -9306, -18850, -7998, 6150, 6890, -14668, 10962, 4877, -5388, 15363, -4585, 3402, 18328, 7087, -18483, -3382, 14386, -4752, 18014, -12068, -6861, 13307, 19913, 10373, 2479, 10236, 9590, 591, 8833, -8214, 8866, 5719, -221, -3524, 6869, 11223, 14516, 17022, 6765, 16305, -14183, -16763, -19558, -12581, 3215, -6785, 584, -10295, -20204, 17677, -3568, 2026, -5267, -4943, -9694, 13720, -19061, 959, 15164, -3232, -11509, 12019, 15574, 1258, 1029, 1380, 5314, 10873, -3076, 10356, -18404, 9514, -5570, 6392, -12440, -2190, 5301, 8502, 5370, -20263, 18526, 3669, 10015, 16932, 15209, 6544, -8031, 10229, 2947, -12521, -9007, -9993, 14694, 5486, -1697, 20432, -16082, 4221, -5207, 4651, -13648, 5404, -9624, -10524, 8889, -3354, 16987, 17683, 11646, 4505, -20105, -10170, 2901, 11684, 2616, 8735, 18131, -19422, -1070, 16790, 656, -5047, 13744, 436, -14135, -8473, -3558, 2073, -13128, -1666, 17429, -5352, 9986, -2458, -19987, 18112, 12018, 12503, -13111, -8648])')
#  5 function calls in 0.050 seconds
# ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.045    0.045 <string>:1(<module>)
#      1    0.045    0.045    0.045    0.045 hometask_3_task_4_2.py:21(get_most_frequent)
#      1    0.005    0.005    0.050    0.050 {built-in method builtins.exec}
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
# timeit
# 100 loops, best of 5: 62.5 msec per loop
# c 20ю повторениями тестировать не вижу сысла - очевидно, различие будет, но не столь значительное