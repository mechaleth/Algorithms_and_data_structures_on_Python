# В одномерном массиве целых чисел определить два наименьших элемента.
# Они могут быть как равны между собой (оба минимальны), так и различаться.

from math import inf

import cProfile


def test_it(func):
    if func([14, 1, 3, 2, -1, 5, 7, 1, 15, 1, 6]) == (-1, 1):
        print("OK")
    else:
        print("Not OK")
    if func([14, -1, 3, 2, -1, 5, 7, -1, 15, 1, 6]) == (-1, -1):
        print("OK")
    else:
        print("Not OK")


def two_min_search(array: list) -> tuple:
    if len(array) == 0:
        return None, None
    if len(array) == 1:
        return array[0], None

    local_array = array.copy()
    local_array.sort()

    return local_array[0], local_array[1]

# Сложность O(logN)

# test_it(two_min_search)

# 10 элементов
# cProfile.run('two_min_search([-30, 40, -45, -45, -25, -45, -30, -20, -45, -25])')
# 8 function calls in 0.000 seconds
# ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#      1    0.000    0.000    0.000    0.000 hometask_3_task_7_3.py:20(two_min_search)
#      1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#      2    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#      1    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
# timeit
# 1000 loops, best of 5: 1.72 usec per loop

# cProfile.run('two_min_search([198, 244, 131, -50, 42, -29, 58, 22, -172, 171, -49, 131, -26, 103, -234, -157, -109, 156, -126, 216, 247, 18, 222, 56, -5, -22, 57, 223, 141, 40, 0, -171, -77, -166, -196, 233, 179, -39, 149, 237, 203, 70, -206, 214, 18, -193, -116, 15, -211, -2, -92, -151, 90, -187, -69, -20, 206, -138, 32, -89, 247, 34, 107, -179, -33, -24, -242, 232, 119, -28, 238, 72, -74, 126, -10, -147, -83, 2, -86, 90, 105, 72, 192, 10, -69, -130, 154, -5, -112, -128, 162, 17, 125, 27, 15, -116, 190, 56, 235, 243])')
# 8 function calls in 0.001 seconds
# ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#      1    0.000    0.000    0.000    0.000 hometask_3_task_7_3.py:20(two_min_search)
#      1    0.001    0.001    0.001    0.001 {built-in method builtins.exec}
#      2    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#      1    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
# timeit
# 1000 loops, best of 5: 8.56 usec per loop

#cProfile.run('two_min_search([3734, 2608, 17814, 1907, -14523, -10835, -294, -8, -4134, 8611, 7599, -2725, -16069, -801, -16733, 19544, 10619, 9914, -2308, 13238, 11900, 12151, 4614, -1972, -6601, 1711, -453, 1614, -3198, 5627, 17761, -478, -18358, -11709, 4355, -7709, -3872, -6601, 8137, 10494, -9112, -15100, -8626, 19845, 14189, 11857, -2861, -13843, 11585, -17644, 15798, 4768, 15058, -14241, -18941, 11994, 5003, -3959, 12168, 12071, -13595, -12507, 19312, 7130, 16302, -19302, 1834, -10051, 362, 16050, -9496, 8296, -4502, -12703, -4822, -17971, -16805, -12543, 1758, -9483, -16272, -15867, -19984, -6236, 8001, 17188, 14967, 1071, -16313, -3158, -6123, 6499, -2459, 18025, -16779, 15948, 19454, -19404, 1684, -14077, -3910, 13225, -5963, -5759, 20448, 18692, -1021, 17539, 8157, 13127, -11754, -13042, 588, -11075, 4839, -19557, -12008, 9061, -11625, -13313, -6239, 17092, 9577, 11170, 7066, -17233, -19214, -2689, -14082, 13503, 19004, 7534, 4686, -8756, 14297, 19777, -4740, 5717, -6973, -16599, 18678, -3495, 16439, 6870, 2739, -12161, 4415, 10781, 16573, 8072, 4487, -15917, 10494, 14527, -11051, 12383, 7579, -17225, -9823, -4889, 10007, -12285, -14635, 3601, 14858, -235, -7733, 4301, 1083, 5752, 18814, 11367, -9879, 17776, 3964, 3520, -3570, 5639, -12551, -11883, 14864, 10550, -19322, 3412, -11923, 14267, -8279, -6280, -16544, -19395, -20285, -1338, -6064, -5087, 7253, 16928, 4156, -1818, -15429, -19941, -19759, 18079, 18459, -14141, -9986, -4435, 15641, -8452, 3232, 6938, -19909, -20135, 15501, -4586, -19895, 16256, 8466, 6300, 18766, 806, -17776, -1930, -6266, -1505, 10381, -18153, 8574, 9598, -7187, -7944, -116, 16504, -2913, 12630, -3660, -818, -4251, -323, 3111, -5451, -13695, 19996, 5697, -8738, -18454, -2072, -9559, 19645, -20462, 18839, 13648, 10986, -16233, -1351, -4446, 7847, 5983, -7331, 18304, -14265, -18893, 2922, -3432, -6252, 6527, -19424, 9852, 17843, -12852, 13747, 8357, -18787, 11120, 14995, -10746, -12122, -10400, 19577, 14271, 15291, 2489, 14821, 19891, 5330, 1292, 1459, -13072, 4233, -2370, 10787, 8477, -15442, -1732, 17222, 18040, 17660, 5148, 1658, -14198, 17600, -152, -13085, 20455, 5450, 10709, 12394, -10686, 6335, -5610, -771, 2900, 9275, 1177, -19610, 8946, -13329, 5299, 5743, 13661, -7640, 7313, -3203, -4637, -5015, 19391, 8180, 4809, 14389, -335, -15523, 16953, -8798, -15083, 2280, 8889, -15806, -17890, -4800, -3519, -17169, 2824, 9823, -14705, -11511, -18662, -10706, 9311, 19315, -3226, -10113, -7101, -2464, 10950, 847, 17212, -15007, 2273, -6440, 8681, 13471, -2937, 12976, -5331, 10694, 11465, -15870, -9025, -19169, -5251, -15170, 14693, 3314, 10989, 5427, -17776, 5421, -77, -16874, -13348, 20326, 2450, 8407, 18805, 8444, 19982, -7843, -17852, 1767, 3642, 9109, 5193, 19277, 1705, 11326, 11246, -20331, 9852, -12675, -19660, 6391, 19278, 15394, -13892, 17999, 4610, 9341, -5102, -9796, 946, 767, 9016, 15768, -7245, -6123, 2388, 13766, 6683, 11717, 8411, 10125, 19618, -17089, -17458, -287, 8637, 17682, -10380, -7895, -1010, -3926, -16493, 2154, 416, 19678, 9831, 16488, -16973, 4949, 14917, -3318, 16974, 1969, 20268, -11182, 6439, -1216, 7194, 3515, -11354, -2439, -37, 12803, 14282, -13801, -16301, 4679, 18875, -3277, 9387, 3958, 17174, -14496, -17589, -1825, 5597, -9332, -4091, 5717, -11754, 4054, -6052, -18788, 7371, 15595, 3732, 19105, 16344, 15026, 2735, 10639, -6987, 12954, -8243, 9130, 11200, 15641, 14422, -4978, 4757, -4934, 18383, -4995, -13171, -16675, -7027, -4690, 17168, -17215, -6778, -17538, -17964, 12040, 17778, 4554, -439, 19496, 3178, 12939, 7785, 2247, 19239, 14373, -6081, -6271, -6906, 10808, -10334, 2465, 1123, 12476, 801, 13207, 1738, -20385, -5421, -600, 1228, -7773, -15513, 2380, -12238, -18902, -14211, -6462, -1035, -6, -14191, -10308, 4198, 7432, -460, 10411, 10773, -17475, -8267, 13394, -18494, -3220, -10247, -6032, -16240, -1854, 16319, 8836, -12092, 17620, -4563, -12702, -11551, -17243, -17648, 11246, 15011, -3495, 5696, 12905, -8822, -617, -12133, -10748, -2246, 14428, -9079, 4417, -18454, 10081, -7398, -9137, -19823, -6968, -256, -14967, -4879, -17089, -6929, -550, 19624, -10891, -7249, 7717, 12442, -3048, 1429, 2154, 11246, -18495, 6925, -2973, 15414, 17967, 19841, 17742, -6837, -11364, -14061, -18745, 20368, -9357, -18792, 14003, 17364, 19428, 5617, 7506, 7577, -9416, 15341, -5346, 9317, -12425, -11419, -18373, -9119, -1395, 11443, 14944, 7345, 10675, -350, -19663, 2695, -11392, 18042, -360, 7753, -20040, -8434, -12193, -13479, 13701, -20476, 15014, 6452, 15821, 6301, 18895, 15556, 2376, 9535, -1493, 3601, 13443, 7386, -2845, -14488, -15527, 12160, 2250, -16153, 9682, -829, -9823, 5278, -15867, 17486, -9300, -17928, 3518, 14648, 19781, -11533, -13565, -11930, 14723, 16782, 5016, 6518, 15566, -14328, 6203, -5854, 14205, -7645, 10764, -5638, 7295, -14839, -17482, -2059, 7860, -10307, 11598, 14026, 4764, 16483, 7577, -13216, 396, 15409, 8621, -15215, 16181, 3261, -16868, 19775, -9646, -7680, 15584, 19652, -16583, 2152, -2335, -4160, 12313, -4130, 3038, -17140, -6631, 8386, -3591, -18020, -4196, -6767, 9910, 14889, -14650, -9981, 11202, -19321, 2004, 10767, -7351, -13252, -14711, 18703, -19341, -13061, 10468, 10604, -11840, -17335, 13061, -13817, 18894, 13107, -5352, -15028, 6751, 16264, -6343, 10700, -18831, -8418, -15414, -8324, -5639, -12020, -14368, -5427, -4225, -8429, 16167, 14272, 5143, 10752, -908, -4994, 15289, 11672, -8190, 18857, 18953, 742, -18225, -3635, 16705, -15006, 17344, -18839, 3063, 5192, 9221, -882, -8785, 15119, 16702, 1454, -8315, -10447, 1148, 10568, 8258, -9843, -10165, -3723, -13922, 17040, -18954, 6904, -17882, 15830, 5801, 10135, -13641, 6558, -5779, -20173, 11112, -8478, -15112, -803, -1039, -17084, 2812, 5599, 7714, 287, -14479, -7164, -8191, -3684, 15058, 13212, 16030, 5118, -20248, 1045, -1782, -17699, -19354, -16766, 2178, -801, 20, -5539, -9811, 7769, 3784, 889, -14318, 11727, -1681, 7311, 8734, 1453, 20160, -11264, 19560, -4856, -3604, 12631, 14500, 9747, 3550, 6266, -7851, 5597, 19835, 17777, 917, 18998, 18686, 16539, 2701, -2706, 15236, -1143, -14930, 8319, -19301, 17598, 1625, -10823, -20437, -17519, 7508, 12440, -16677, -7460, 7083, -19612, 6914, 8554, -3030, 14653, 1036, 1077, -3222, 17769, -7603, -11956, 17843, 6206, 2030, -11379, -5502, -524, 11644, -13388, -2547])')

# 8 function calls in 0.005 seconds
# ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#      1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#      1    0.000    0.000    0.000    0.000 hometask_3_task_7_3.py:20(two_min_search)
#      1    0.005    0.005    0.005    0.005 {built-in method builtins.exec}
#      2    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#      1    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}
#      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#      1    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
# timeit
# 1000 loops, best of 5: 132 usec per loop